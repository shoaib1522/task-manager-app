# .github/workflows/ci.yml

name: Full Stack CI for Task Manager

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run lint

  lint-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - run: flake8 .
      - run: black --check .

  test-frontend:
    runs-on: ubuntu-latest
    needs: lint-frontend
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm test -- --coverage
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          # The coverage directory is created inside the frontend directory
          path: frontend/coverage/

  test-backend:
    runs-on: ubuntu-latest
    needs: lint-backend
    defaults:
      run:
        # We run the command from the backend directory...
        working-directory: ./backend
    
    # --- FIX #1: SET THE PYTHONPATH ---
    # This tells Python to also look for modules in the project root,
    # which fixes the 'relative import' error.
    env:
      PYTHONPATH: .

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      # This command now runs successfully.
      - run: pytest --cov=main --cov-report=xml
      - uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          # The coverage report is created inside the backend directory
          path: backend/coverage.xml

  build-frontend:
    runs-on: ubuntu-latest
    needs: test-frontend
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  build-backend-docker:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t taskmanager-api:${{ github.sha }} ./backend
      - name: Save Docker image as artifact
        run: docker save taskmanager-api:${{ github.sha }} > backend-image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar